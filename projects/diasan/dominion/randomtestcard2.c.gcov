        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// randomtestcard2.c
        -:    2://
        -:    3:// Andrea Dias
        -:    4:// 5/13/18
        -:    5:// CS 362-400 Spring 2018
        -:    6:// Random Testing Great Hall Card
        -:    7:
        -:    8:
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include <stdlib.h>
        -:   17:
    #####:   18:void myAssert(int a, int b){
    #####:   19:	if (a != b) {
    #####:   20:		printf("***Test fails! You did not get the intended result***\n");
        -:   21:	}
    #####:   22:}
        -:   23:
        1:   24:int main() {
        -:   25:
        1:   26:    int choice1 = 0;
        1:   27:    int choice2 = 0;
        1:   28:    int choice3 = 0;
        1:   29:    int bonus = 0;
        1:   30:    int handPos = 0;
        -:   31:    struct gameState *state, *teststate;
        -:   32:    
        -:   33:    struct gameState myGame, myTestGame;
        1:   34:    state = &myGame;
        1:   35:    teststate = &myTestGame;
        1:   36:    int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall };
        1:   37:    int plusTwo = 2;
        1:   38:    int plusOne = 1;
        -:   39:    int i, j;
        -:   40:    
        1:   41:    initializeGame(2, k, 100, state);
        -:   42:
        1:   43:    memcpy(teststate, state, sizeof(struct gameState));
        -:   44:
        1:   45:    printf("--------------------- Testing Card: GREAT HALL  ----------------------\n");
        -:   46:
        1:   47:    cardEffect(great_hall, choice1, choice2, choice3, teststate, handPos, &bonus);
        -:   48:    
        1:   49:    int currentPlayer = whoseTurn(state); 
        -:   50:    
        -:   51:
        2:   52:    for (i = 0; i < 1; i++) { 
    18598:   53:    	for (j = 0; j < 25000; j++) {
        -:   54:    
    18598:   55:    		int randNum1 = rand() % 15;
    18598:   56:    		int randNum2 = rand() % 15;
    18598:   57:    		int randNumA = rand() % 15;
    18598:   58:    		int randNumV = rand() % 15;
        -:   59:       
    18598:   60:    		if (randNum1 == (state->handCount[currentPlayer] + plusOne) 
     1276:   61:    			&& randNum2 == (state->deckCount[currentPlayer] - plusOne)
       93:   62:    			&& randNumA == (state->numActions + plusOne)
        4:   63:    			&& randNumV == (scoreFor(currentPlayer, state) + plusOne)) {
        -:   64: 
        -:   65:    			
        1:   66:    			printf("Cards in Hand = %d, Expected = %d\n", randNum1, state->handCount[currentPlayer] + plusOne);
        1:   67:   			 	printf("Cards in Deck = %d, Expected = %d\n", randNum2, state->deckCount[currentPlayer] - plusOne);
        1:   68:   			 	printf("Number of Actions = %d, Expected = %d\n", randNumA, state->numActions + plusOne);
        1:   69:   			 	printf("Victory Points = %d, Expected = %d\n", randNumV, scoreFor(currentPlayer, state) + plusOne);
        1:   70:				break;
        -:   71:				}
        -:   72:    
        -:   73:			}
        -:   74:		}    
        -:   75:
        -:   76:
        -:   77: 
        1:   78:  	printf("--------------------- Testing Cards in Play --------------------- \n");
        2:   79:	for (i = 0; i < 1; i++) { 
   124944:   80:    	for (j = 0; j < 250000; j++) {
        -:   81:    	
        -:   82:    	
   124944:   83:    	    int randNum3 = rand() % 50;
   124944:   84:    		int randNum4 = rand() % 50;
   124944:   85:    		int randNum5 = rand() % 50;
        -:   86:
        -:   87:    		
   124944:   88:	 		if (randNum3 == state->supplyCount[estate] 
     2481:   89:	  				&& randNum4 == state->supplyCount[duchy]
       54:   90:	  				&& randNum5 == state->supplyCount[province] ) {
        -:   91:
        -:   92:	
        1:   93:    			printf("# of Estate Cards = %d, Expected = %d\n", randNum3, state->supplyCount[estate]);
        -:   94:  			 	//myAssert(teststate->supplyCount[estate], state->supplyCount[estate]);
        1:   95: 				printf("# of Duchy Cards = %d, Expected = %d\n", randNum4, state->supplyCount[duchy]);
        -:   96: 				//myAssert(teststate->supplyCount[duchy], state->supplyCount[duchy]);
        1:   97:  				printf("# of Province Cards = %d, Expected = %d\n", randNum5, state->supplyCount[province]);
        -:   98:  				//myAssert(teststate->supplyCount[province], state->supplyCount[province]);
        -:   99: 
        1:  100:				break;
        -:  101:				}
        -:  102:			}
        -:  103:		}
        -:  104:	
        -:  105:	
        2:  106:		for (i = 0; i < 1; i++) { 
   212946:  107:    		for (j = 0; j < 250000; j++) {
        -:  108:	
   212946:  109:	    		int randNum6 = rand() % 50;
   212946:  110:    			int randNum7 = rand() % 50;
   212946:  111:    			int randNum8 = rand() % 50;
        -:  112:	
   212946:  113:		  		if (randNum6 == state->supplyCount[copper]
     4232:  114:	  					&& randNum7 == state->supplyCount[silver]
       89:  115:	  					&& randNum8 == state->supplyCount[gold]) {
        -:  116:	
        -:  117:	
        1:  118:	 			printf("# of Copper Cards = %d, Expected = %d\n", randNum6, state->supplyCount[copper]);
        -:  119:  				//myAssert(teststate->supplyCount[copper], state->supplyCount[copper]);
        1:  120:  				printf("# of Silver Cards = %d, Expected = %d\n", randNum7, state->supplyCount[silver]);
        -:  121:  				//myAssert(teststate->supplyCount[silver], state->supplyCount[silver]);
        1:  122:  				printf("# of Gold Cards = %d, Expected = %d\n", randNum8, state->supplyCount[gold]);   
        -:  123:  				//myAssert(teststate->supplyCount[gold], state->supplyCount[gold]);   
        1:  124:  				break;
        -:  125:	
        -:  126:	}}}
        -:  127:	
        -:  128:    
        1:  129:    return 0;
        -:  130:
        -:  131:}
        -:  132:
        -:  133:/****
        -:  134:
        -:  135:REFACTORED CODE:
        -:  136:
        -:  137:int refactorGreatHall(int card, struct gameState *state, int handPos) {
        -:  138:
        -:  139:	int currentPlayer = whoseTurn(state);
        -:  140:      
        -:  141:      //+1 Card regular.. added second drawCard statement
        -:  142:      drawCard(currentPlayer, state);
        -:  143:      drawCard(currentPlayer, state); //added this statement for refactor
        -:  144:			
        -:  145:      //+1 Actions
        -:  146:      state->numActions++;
        -:  147:			
        -:  148:      //discard card from hand
        -:  149:      discardCard(handPos, currentPlayer, state, 0);
        -:  150:      return 0;
        -:  151:
        -:  152:***/
