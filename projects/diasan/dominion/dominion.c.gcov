        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:167
        -:    0:Programs:146
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7://Assignment 2
        -:    8:
function refactorGreatHall called 6 returned 100% blocks executed 100%
        6:    9:int refactorGreatHall(int card, struct gameState *state, int handPos) {
        -:   10:
        6:   11:	  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   12:      
        -:   13:      //+1 Card regular.. added second drawCard statement
        6:   14:      drawCard(currentPlayer, state);
call    0 returned 100%
        6:   15:      drawCard(currentPlayer, state); //added this statement for refactor
call    0 returned 100%
        -:   16:			
        -:   17:      //+1 Actions
        6:   18:      state->numActions = state->numActions + 1;
        -:   19:			
        -:   20:      //discard card from hand
        6:   21:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:   22:      return 0;
        -:   23:
        -:   24:}
        -:   25:
function refactorSmithy called 4 returned 100% blocks executed 100%
        4:   26:int refactorSmithy(int card, struct gameState *state, int handPos) {
        -:   27:      //+3 cards for normal, add 4 for refactor
        -:   28:      
        -:   29:    int i;   
        4:   30:  	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   31: 
       20:   32:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   33:	{
       16:   34:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   35:	}
        -:   36:			
        -:   37:    //discard card from hand
        4:   38:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:   39:  
        4:   40:    return 0;
        -:   41:}
        -:   42:
function refactorAdventurer called 22 returned 100% blocks executed 24%
       22:   43:int refactorAdventurer(int card, struct gameState *state, int handPos) {
        -:   44://turned (drawntreasure<2) into (drawntreasure>2)
        -:   45:
        -:   46:  int cardDrawn;
       22:   47:  int drawntreasure=0;
       22:   48:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       22:   49:  int nextPlayer = currentPlayer + 1;
        -:   50:  int temphand[MAX_HAND];// moved above the if statement
       22:   51:  int z=0;// this is the counter for the temp hand
       22:   52:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:    nextPlayer = 0;
        -:   54:  
        -:   55:  
    #####:   56: while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:   57:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:   58:	  shuffle(currentPlayer, state);
call    0 never executed
        -:   59:	}
    #####:   60:	drawCard(currentPlayer, state);
call    0 never executed
    #####:   61:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   62:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   63:	  drawntreasure++;
        -:   64:	else{
    #####:   65:	  temphand[z]=cardDrawn;
    #####:   66:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   67:	  z++;
        -:   68:	}
        -:   69:      }
    #####:   70:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:   71:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   72:	z=z-1;
        -:   73:      }
        -:   74:    }
       22:   75:      return 0;
        -:   76: 
        -:   77:}
        -:   78:
function refactorEmbargo called 0 returned 0% blocks executed 0%
    #####:   79:int refactorEmbargo(int card, int choice1, struct gameState *state, int handPos) {
        -:   80:
    #####:   81:  	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   82:
        -:   83:      //+2 Coins regular, add 20 for refactor
    #####:   84:      state->coins = state->coins + 20;
        -:   85:			
        -:   86:      //see if selected pile is in play
    #####:   87:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:   88:	{
    #####:   89:	  return -1;
        -:   90:	}
        -:   91:			
        -:   92:      //add embargo token to selected supply pile
    #####:   93:      state->embargoTokens[choice1]++;
        -:   94:			
        -:   95:      //trash card
    #####:   96:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:   97:      return 0;
        -:   98:
        -:   99:}
        -:  100:
        -:  101:
        -:  102:
function refactorVillage called 8 returned 100% blocks executed 100%
        8:  103:int refactorVillage(int card, struct gameState *state, int handPos) {
        -:  104:
        8:  105:	  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  106:
        -:  107:      //+1 Card 
        8:  108:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  109:
        -:  110:			
        -:  111:      //+2 Actions
        8:  112:      state->numActions = state->numActions + 2;
        -:  113:			
        -:  114:      //discard played card from hand (refactor: don't discard the card)
        -:  115:      //discardCard(handPos, currentPlayer, state, 0);
        -:  116:      
        8:  117:      return 0;
        -:  118:}
        -:  119:
function compare called 54530 returned 100% blocks executed 100%
    54530:  120:int compare(const void* a, const void* b) {
    54530:  121:  if (*(int*)a > *(int*)b)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     9150:  122:    return 1;
    45380:  123:  if (*(int*)a < *(int*)b)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
    18599:  124:    return -1;
    26781:  125:  return 0;
        -:  126:}
        -:  127:
function newGame called 0 returned 0% blocks executed 0%
    #####:  128:struct gameState* newGame() {
    #####:  129:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  130:  return g;
        -:  131:}
        -:  132:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  133:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  134:		  int k8, int k9, int k10) {
    #####:  135:  int* k = malloc(10 * sizeof(int));
    #####:  136:  k[0] = k1;
    #####:  137:  k[1] = k2;
    #####:  138:  k[2] = k3;
    #####:  139:  k[3] = k4;
    #####:  140:  k[4] = k5;
    #####:  141:  k[5] = k6;
    #####:  142:  k[6] = k7;
    #####:  143:  k[7] = k8;
    #####:  144:  k[8] = k9;
    #####:  145:  k[9] = k10;
    #####:  146:  return k;
        -:  147:}
        -:  148:
function initializeGame called 1211 returned 100% blocks executed 94%
     1211:  149:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  150:		   struct gameState *state) {
        -:  151:
        -:  152:  int i;
        -:  153:  int j;
        -:  154:  int it;			
        -:  155:  //set up random number generator
     1211:  156:  SelectStream(1);
call    0 returned 100%
     1211:  157:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  158:  
        -:  159:  //check number of players
     1211:  160:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  161:    {
    #####:  162:      return -1;
        -:  163:    }
        -:  164:
        -:  165:  //set number of players
     1211:  166:  state->numPlayers = numPlayers;
        -:  167:
        -:  168:  //check selected kingdom cards are different
    13321:  169:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  170:    {
   133210:  171:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  172:        {
   121100:  173:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  174:	    {
    #####:  175:	      return -1;
        -:  176:	    }
        -:  177:        }
        -:  178:    }
        -:  179:
        -:  180:
        -:  181:  //initialize supply
        -:  182:  ///////////////////////////////
        -:  183:
        -:  184:  //set number of Curse cards
     1211:  185:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  186:    {
     1207:  187:      state->supplyCount[curse] = 10;
        -:  188:    }
        4:  189:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  190:    {
        4:  191:      state->supplyCount[curse] = 20;
        -:  192:    }
        -:  193:  else
        -:  194:    {
    #####:  195:      state->supplyCount[curse] = 30;
        -:  196:    }
        -:  197:
        -:  198:  //set number of Victory cards
     1211:  199:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  200:    {
     1207:  201:      state->supplyCount[estate] = 8;
     1207:  202:      state->supplyCount[duchy] = 8;
     1207:  203:      state->supplyCount[province] = 8;
        -:  204:    }
        -:  205:  else
        -:  206:    {
        4:  207:      state->supplyCount[estate] = 12;
        4:  208:      state->supplyCount[duchy] = 12;
        4:  209:      state->supplyCount[province] = 12;
        -:  210:    }
        -:  211:
        -:  212:  //set number of Treasure cards
     1211:  213:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1211:  214:  state->supplyCount[silver] = 40;
     1211:  215:  state->supplyCount[gold] = 30;
        -:  216:
        -:  217:  //set number of Kingdom cards
    25431:  218:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  219:    {
   199815:  220:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  221:	{
   187705:  222:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  223:	    {
        -:  224:	      //check if card is a 'Victory' Kingdom card
    12110:  225:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  226:		{
     4844:  227:		  if (numPlayers == 2){ 
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     2414:  228:		    state->supplyCount[i] = 8; 
        -:  229:		  }
        8:  230:		  else{ state->supplyCount[i] = 12; }
        -:  231:		}
        -:  232:	      else
        -:  233:		{
     9688:  234:		  state->supplyCount[i] = 10;
        -:  235:		}
    12110:  236:	      break;
        -:  237:	    }
        -:  238:	  else    //card is not in the set choosen for the game
        -:  239:	    {
   175595:  240:	      state->supplyCount[i] = -1;
        -:  241:	    }
        -:  242:	}
        -:  243:
        -:  244:    }
        -:  245:
        -:  246:  ////////////////////////
        -:  247:  //supply intilization complete
        -:  248:
        -:  249:  //set player decks
     3637:  250:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  251:    {
     2426:  252:      state->deckCount[i] = 0;
     9704:  253:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  254:	{
     7278:  255:	  state->deck[i][j] = estate;
     7278:  256:	  state->deckCount[i]++;
        -:  257:	}
    19408:  258:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  259:	{
    16982:  260:	  state->deck[i][j] = copper;
    16982:  261:	  state->deckCount[i]++;		
        -:  262:	}
        -:  263:    }
        -:  264:
        -:  265:  //shuffle player decks
     3637:  266:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  267:    {
     2426:  268:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  269:	{
    #####:  270:	  return -1;
        -:  271:	}
        -:  272:    }
        -:  273:
        -:  274:  //draw player hands
     3637:  275:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  276:    {  
        -:  277:      //initialize hand size to zero
     2426:  278:      state->handCount[i] = 0;
     2426:  279:      state->discardCount[i] = 0;
        -:  280:      //draw 5 cards
        -:  281:      // for (j = 0; j < 5; j++)
        -:  282:      //	{
        -:  283:      //	  drawCard(i, state);
        -:  284:      //	}
        -:  285:    }
        -:  286:  
        -:  287:  //set embargo tokens to 0 for all supply piles
    33908:  288:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  289:    {
    32697:  290:      state->embargoTokens[i] = 0;
        -:  291:    }
        -:  292:
        -:  293:  //initialize first player's turn
     1211:  294:  state->outpostPlayed = 0;
     1211:  295:  state->phase = 0;
     1211:  296:  state->numActions = 1;
     1211:  297:  state->numBuys = 1;
     1211:  298:  state->playedCardCount = 0;
     1211:  299:  state->whoseTurn = 0;
     1211:  300:  state->handCount[state->whoseTurn] = 0;
        -:  301:  //int it; move to top
        -:  302:
        -:  303:  //Moved draw cards to here, only drawing at the start of a turn
     7266:  304:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     6055:  305:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  306:  }
        -:  307:
     1211:  308:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  309:
     1211:  310:  return 0;
        -:  311:}
        -:  312:
function shuffle called 2445 returned 100% blocks executed 94%
     2445:  313:int shuffle(int player, struct gameState *state) {
        -:  314: 
        -:  315:
        -:  316:  int newDeck[MAX_DECK];
     2445:  317:  int newDeckPos = 0;
        -:  318:  int card;
        -:  319:  int i;
        -:  320:
     2445:  321:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  322:    return -1;
     2445:  323:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  324:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  325:
    31677:  326:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    26787:  327:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    26787:  328:    newDeck[newDeckPos] = state->deck[player][card];
    26787:  329:    newDeckPos++;
   331168:  330:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   304381:  331:      state->deck[player][i] = state->deck[player][i+1];
        -:  332:    }
    26787:  333:    state->deckCount[player]--;
        -:  334:  }
    29232:  335:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    26787:  336:    state->deck[player][i] = newDeck[i];
    26787:  337:    state->deckCount[player]++;
        -:  338:  }
        -:  339:
     2445:  340:  return 0;
        -:  341:}
        -:  342:
function playCard called 0 returned 0% blocks executed 0%
    #####:  343:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  344:{	
        -:  345:  int card;
    #####:  346:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  347:
        -:  348:  //check if it is the right phase
    #####:  349:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  350:    {
    #####:  351:      return -1;
        -:  352:    }
        -:  353:	
        -:  354:  //check if player has enough actions
    #####:  355:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  356:    {
    #####:  357:      return -1;
        -:  358:    }
        -:  359:	
        -:  360:  //get card played
    #####:  361:  card = handCard(handPos, state);
call    0 never executed
        -:  362:	
        -:  363:  //check if selected card is an action
    #####:  364:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  365:    {
    #####:  366:      return -1;
        -:  367:    }
        -:  368:	
        -:  369:  //play card
    #####:  370:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  371:    {
    #####:  372:      return -1;
        -:  373:    }
        -:  374:	
        -:  375:  //reduce number of actions
    #####:  376:  state->numActions--;
        -:  377:
        -:  378:  //update coins (Treasure cards may be added with card draws)
    #####:  379:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  380:	
    #####:  381:  return 0;
        -:  382:}
        -:  383:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  384:int buyCard(int supplyPos, struct gameState *state) {
        -:  385:  int who;
        -:  386:  if (DEBUG){
        -:  387:    printf("Entering buyCard...\n");
        -:  388:  }
        -:  389:
        -:  390:  // I don't know what to do about the phase thing.
        -:  391:
    #####:  392:  who = state->whoseTurn;
        -:  393:
    #####:  394:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  395:    if (DEBUG)
        -:  396:      printf("You do not have any buys left\n");
    #####:  397:    return -1;
    #####:  398:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  399:    if (DEBUG)
        -:  400:      printf("There are not any of that type of card left\n");
    #####:  401:    return -1;
    #####:  402:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  403:    if (DEBUG) 
        -:  404:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  405:    return -1;
        -:  406:  } else {
    #####:  407:    state->phase=1;
        -:  408:    //state->supplyCount[supplyPos]--;
    #####:  409:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  410:  
    #####:  411:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  412:    state->numBuys--;
        -:  413:    if (DEBUG)
        -:  414:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  415:  }
        -:  416:
        -:  417:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  418:  //state->discardCount[who]++;
        -:  419:    
    #####:  420:  return 0;
        -:  421:}
        -:  422:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  423:int numHandCards(struct gameState *state) {
    #####:  424:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  425:}
        -:  426:
function handCard called 0 returned 0% blocks executed 0%
    #####:  427:int handCard(int handPos, struct gameState *state) {
    #####:  428:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  429:  return state->hand[currentPlayer][handPos];
        -:  430:}
        -:  431:
function supplyCount called 1038 returned 100% blocks executed 100%
     1038:  432:int supplyCount(int card, struct gameState *state) {
     1038:  433:  return state->supplyCount[card];
        -:  434:}
        -:  435:
function fullDeckCount called 48 returned 100% blocks executed 82%
       48:  436:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  437:  int i;
       48:  438:  int count = 0;
        -:  439:
      268:  440:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
        -:  441:    {
      220:  442:      if (state->deck[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  443:    }
        -:  444:
      168:  445:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  446:    {
      120:  447:      if (state->hand[player][i] == card) count++;
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  448:    }
        -:  449:
       48:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  451:    {
    #####:  452:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  453:    }
        -:  454:
       48:  455:  return count;
        -:  456:}
        -:  457:
function whoseTurn called 167 returned 100% blocks executed 100%
      167:  458:int whoseTurn(struct gameState *state) {
      167:  459:  return state->whoseTurn;
        -:  460:}
        -:  461:
function endTurn called 17 returned 100% blocks executed 100%
       17:  462:int endTurn(struct gameState *state) {
        -:  463:  int k;
        -:  464:  int i;
       17:  465:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  466:  
        -:  467:  //Discard hand
      102:  468:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       85:  469:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       85:  470:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  471:  }
       17:  472:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  473:    
        -:  474:  //Code for determining the player
       17:  475:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
       13:  476:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  477:  }
        -:  478:  else{
        4:  479:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  480:  }
        -:  481:
       17:  482:  state->outpostPlayed = 0;
       17:  483:  state->phase = 0;
       17:  484:  state->numActions = 1;
       17:  485:  state->coins = 0;
       17:  486:  state->numBuys = 1;
       17:  487:  state->playedCardCount = 0;
       17:  488:  state->handCount[state->whoseTurn] = 0;
        -:  489:
        -:  490:  //int k; move to top
        -:  491:  //Next player draws hand
      102:  492:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       85:  493:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  494:  }
        -:  495:
        -:  496:  //Update money
       17:  497:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  498:
       17:  499:  return 0;
        -:  500:}
        -:  501:
function isGameOver called 36 returned 100% blocks executed 73%
       36:  502:int isGameOver(struct gameState *state) {
        -:  503:  int i;
        -:  504:  int j;
        -:  505:	
        -:  506:  //if stack of Province cards is empty, the game ends
       36:  507:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  508:    {
    #####:  509:      return 1;
        -:  510:    }
        -:  511:
        -:  512:  //if three supply pile are at 0, the game ends
       36:  513:  j = 0;
      936:  514:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  515:    {
      900:  516:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  517:	{
    #####:  518:	  j++;
        -:  519:	}
        -:  520:    }
       36:  521:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  522:    {
    #####:  523:      return 1;
        -:  524:    }
        -:  525:
       36:  526:  return 0;
        -:  527:}
        -:  528:
function scoreFor called 1080 returned 100% blocks executed 40%
     1080:  529:int scoreFor (int player, struct gameState *state) {
        -:  530:
        -:  531:  int i;
     1080:  532:  int score = 0;
        -:  533:  //score from hand
     4200:  534:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  535:    {
     3120:  536:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
     3120:  537:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     3120:  538:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
     3120:  539:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
     3120:  540:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
     3120:  541:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  542:    }
        -:  543:
        -:  544:  //score from discard
     1080:  545:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  546:    {
    #####:  547:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  548:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  549:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  550:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  551:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  552:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  553:    }
        -:  554:
        -:  555:  //score from deck
     1080:  556:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  557:    {
    #####:  558:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  559:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  560:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  561:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  562:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  563:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  564:    }
        -:  565:
     1080:  566:  return score;
        -:  567:}
        -:  568:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  569:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  570:  int i;	
        -:  571:  int j;
        -:  572:  int highScore;
        -:  573:  int currentPlayer;
        -:  574:
        -:  575:  //get score for each player
    #####:  576:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  577:    {
        -:  578:      //set unused player scores to -9999
    #####:  579:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  580:	{
    #####:  581:	  players[i] = -9999;
        -:  582:	}
        -:  583:      else
        -:  584:	{
    #####:  585:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  586:	}
        -:  587:    }
        -:  588:
        -:  589:  //find highest score
    #####:  590:  j = 0;
    #####:  591:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  594:	{
    #####:  595:	  j = i;
        -:  596:	}
        -:  597:    }
    #####:  598:  highScore = players[j];
        -:  599:
        -:  600:  //add 1 to players who had less turns
    #####:  601:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  602:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  603:    {
    #####:  604:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  605:	{
    #####:  606:	  players[i]++;
        -:  607:	}
        -:  608:    }
        -:  609:
        -:  610:  //find new highest score
    #####:  611:  j = 0;
    #####:  612:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  613:    {
    #####:  614:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  615:	{
    #####:  616:	  j = i;
        -:  617:	}
        -:  618:    }
    #####:  619:  highScore = players[j];
        -:  620:
        -:  621:  //set winners in array to 1 and rest to 0
    #####:  622:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  623:    {
    #####:  624:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  625:	{
    #####:  626:	  players[i] = 1;
        -:  627:	}
        -:  628:      else
        -:  629:	{
    #####:  630:	  players[i] = 0;
        -:  631:	}
        -:  632:    }
        -:  633:
    #####:  634:  return 0;
        -:  635:}
        -:  636:
function drawCard called 12286 returned 100% blocks executed 92%
    12286:  637:int drawCard(int player, struct gameState *state)
        -:  638:{	int count;
        -:  639:  int deckCounter;
    12286:  640:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  641:    
        -:  642:    //Step 1 Shuffle the discard pile back into a deck
        -:  643:    int i;
        -:  644:    //Move discard to deck
     2433:  645:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2427:  646:      state->deck[player][i] = state->discard[player][i];
     2427:  647:      state->discard[player][i] = -1;
        -:  648:    }
        -:  649:
        6:  650:    state->deckCount[player] = state->discardCount[player];
        6:  651:    state->discardCount[player] = 0;//Reset discard
        -:  652:
        -:  653:    //Shuffle the deck
        6:  654:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  655:   
        -:  656:    if (DEBUG){//Debug statements
        -:  657:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  658:    }
        -:  659:    
        6:  660:    state->discardCount[player] = 0;
        -:  661:
        -:  662:    //Step 2 Draw Card
        6:  663:    count = state->handCount[player];//Get current player's hand count
        -:  664:    
        -:  665:    if (DEBUG){//Debug statements
        -:  666:      printf("Current hand count: %d\n", count);
        -:  667:    }
        -:  668:    
        6:  669:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  670:
        6:  671:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  672:      return -1;
        -:  673:
        6:  674:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  675:    state->deckCount[player]--;
        6:  676:    state->handCount[player]++;//Increment hand count
        -:  677:  }
        -:  678:
        -:  679:  else{
    12280:  680:    int count = state->handCount[player];//Get current hand count for player
        -:  681:    int deckCounter;
        -:  682:    if (DEBUG){//Debug statements
        -:  683:      printf("Current hand count: %d\n", count);
        -:  684:    }
        -:  685:
    12280:  686:    deckCounter = state->deckCount[player];//Create holder for the deck count
    12280:  687:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    12280:  688:    state->deckCount[player]--;
    12280:  689:    state->handCount[player]++;//Increment hand count
        -:  690:  }
        -:  691:
    12286:  692:  return 0;
        -:  693:}
        -:  694:
function getCost called 199 returned 100% blocks executed 97%
      199:  695:int getCost(int cardNumber)
        -:  696:{
      199:  697:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 5%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 7%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  698:    {
        -:  699:    case curse:
        8:  700:      return 0;
        -:  701:    case estate:
        9:  702:      return 2;
        -:  703:    case duchy:
        7:  704:      return 5;
        -:  705:    case province:
        7:  706:      return 8;
        -:  707:    case copper:
        7:  708:      return 0;
        -:  709:    case silver:
        7:  710:      return 3;
        -:  711:    case gold:
        7:  712:      return 6;
        -:  713:    case adventurer:
        7:  714:      return 6;
        -:  715:    case council_room:
        7:  716:      return 5;
        -:  717:    case feast:
        7:  718:      return 4;
        -:  719:    case gardens:
        7:  720:      return 4;
        -:  721:    case mine:
        7:  722:      return 5;
        -:  723:    case remodel:
       14:  724:      return 4;
        -:  725:    case smithy:
        7:  726:      return 4;
        -:  727:    case village:
        7:  728:      return 3;
        -:  729:    case baron:
        7:  730:      return 4;
        -:  731:    case great_hall:
        7:  732:      return 3;
        -:  733:    case minion:
        7:  734:      return 5;
        -:  735:    case steward:
        7:  736:      return 3;
        -:  737:    case tribute:
        7:  738:      return 5;
        -:  739:    case ambassador:
        7:  740:      return 3;
        -:  741:    case cutpurse:
        7:  742:      return 4;
        -:  743:    case embargo: 
        7:  744:      return 2;
        -:  745:    case outpost:
        7:  746:      return 5;
        -:  747:    case salvager:
        7:  748:      return 4;
        -:  749:    case sea_hag:
        7:  750:      return 4;
        -:  751:    case treasure_map:
        7:  752:      return 4;
        -:  753:    }
        -:  754:	
    #####:  755:  return -1;
        -:  756:}
        -:  757:
        -:  758:
        -:  759://////////////CARD EFFECT/////////////////////////////////////////
function cardEffect called 36 returned 100% blocks executed 13%
       36:  760:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  761:{
        -:  762:  int i;
        -:  763:  int j;
        -:  764:  int k;
        -:  765:  int x;
        -:  766:  int index;
       36:  767:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       36:  768:  int nextPlayer = currentPlayer + 1;
        -:  769:
       36:  770:  int tributeRevealedCards[2] = {-1, -1};
        -:  771:  int temphand[MAX_HAND];// moved above the if statement
        -:  772:  //int drawntreasure=0;
        -:  773:  //int cardDrawn;
        -:  774:  //int z=0;// this is the counter for the temp hand
       36:  775:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  776:    nextPlayer = 0;
        -:  777:  }
        -:  778:  
        -:  779:	
        -:  780:  //uses switch to select card and perform actions
       36:  781:  switch( card ) 
branch  0 taken 61%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 11%
branch  7 taken 11%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  782:    {
        -:  783:    case adventurer:
        -:  784:	
       22:  785:		refactorAdventurer(card, state, handPos);
call    0 returned 100%
        -:  786:			
        -:  787:    case council_room:
        -:  788:      //+4 Cards
      110:  789:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  790:	{
       88:  791:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  792:	}
        -:  793:			
        -:  794:      //+1 Buy
       22:  795:      state->numBuys++;
        -:  796:			
        -:  797:      //Each other player draws a card
       66:  798:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  799:	{
       44:  800:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  801:	    {
       22:  802:	      drawCard(i, state);
call    0 returned 100%
        -:  803:	    }
        -:  804:	}
        -:  805:			
        -:  806:      //put played card in played card pile
       22:  807:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  808:			
       22:  809:      return 0;
        -:  810:			
        -:  811:    case feast:
        -:  812:      //gain card with cost up to 5
        -:  813:      //Backup hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  815:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  816:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  817:      }
        -:  818:      //Backup hand
        -:  819:
        -:  820:      //Update Coins for Buy
    #####:  821:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  822:      x = 1;//Condition to loop on
    #####:  823:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  824:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	  if (DEBUG)
        -:  826:	    printf("None of that card left, sorry!\n");
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  830:	  }
        -:  831:	}
    #####:  832:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  837:	  }
        -:  838:	}
        -:  839:	else{
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
    #####:  845:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  846:	  x = 0;//No more buying cards
        -:  847:
        -:  848:	  if (DEBUG){
        -:  849:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:	  }
        -:  851:
        -:  852:	}
        -:  853:      }     
        -:  854:
        -:  855:      //Reset Hand
    #####:  856:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  857:	state->hand[currentPlayer][i] = temphand[i];
    #####:  858:	temphand[i] = -1;
        -:  859:      }
        -:  860:      //Reset Hand
        -:  861:      			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case gardens:
    #####:  865:      return -1;
        -:  866:			
        -:  867:    case mine:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:		
    #####:  875:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:			
    #####:  900:      return 0;
        -:  901:			
        -:  902:    case remodel:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  917:	{
    #####:  918:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  919:	    {
    #####:  920:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  921:	      break;
        -:  922:	    }
        -:  923:	}
        -:  924:
        -:  925:
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case smithy:
        -:  929:   
        4:  930:	refactorSmithy(card, state, handPos);
call    0 returned 100%
        -:  931:		
        -:  932:    case village:
        -:  933:    
        8:  934:		refactorVillage(card, state, handPos);
call    0 returned 100%
        -:  935:		
        -:  936:    case baron:
        8:  937:      state->numBuys++;//Increase buys by 1!
        8:  938:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  939:	int p = 0;//Iterator for hand!
    #####:  940:	int card_not_discarded = 1;//Flag for discard set!
    #####:  941:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  942:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  943:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  944:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  945:	    state->discardCount[currentPlayer]++;
    #####:  946:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  947:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  948:	    }
    #####:  949:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  950:	    state->handCount[currentPlayer]--;
    #####:  951:	    card_not_discarded = 0;//Exit the loop
        -:  952:	  }
    #####:  953:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  954:	    if(DEBUG) {
        -:  955:	      printf("No estate cards in your hand, invalid choice\n");
        -:  956:	      printf("Must gain an estate if there are any\n");
        -:  957:	    }
    #####:  958:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  960:	      state->supplyCount[estate]--;//Decrement estates
    #####:  961:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  962:		isGameOver(state);
call    0 never executed
        -:  963:	      }
        -:  964:	    }
    #####:  965:	    card_not_discarded = 0;//Exit the loop
        -:  966:	  }
        -:  967:			    
        -:  968:	  else{
    #####:  969:	    p++;//Next card
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:			    
        -:  974:      else{
        8:  975:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        8:  976:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        8:  977:	  state->supplyCount[estate]--;//Decrement Estates
        8:  978:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  979:	    isGameOver(state);
call    0 never executed
        -:  980:	  }
        -:  981:	}
        -:  982:      }
        -:  983:	    
        -:  984:      
        8:  985:      return 0;
        -:  986:		
        -:  987:    case great_hall:
        6:  988:		refactorGreatHall(card, state, handPos);
call    0 returned 100%
        -:  989:		
        -:  990:    case minion:
        -:  991:      //+1 action
        6:  992:      state->numActions++;
        -:  993:			
        -:  994:      //discard card from hand
        6:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  996:			
        6:  997:      if (choice1)		//+2 coins
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  998:	{
    #####:  999:	  state->coins = state->coins + 2;
        -: 1000:	}
        -: 1001:			
        6: 1002:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1003:	{
        -: 1004:	  //discard hand
    #####: 1005:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1006:	    {
    #####: 1007:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //draw 4
    #####: 1011:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //other players discard hand and redraw if hand size > 4
    #####: 1017:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
        -: 1023:		      //discard hand
    #####: 1024:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1027:			}
        -: 1028:							
        -: 1029:		      //draw 4
    #####: 1030:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
    #####: 1032:			  drawCard(i, state);
call    0 never executed
        -: 1033:			}
        -: 1034:		    }
        -: 1035:		}
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}
        6: 1039:      return 0;
        -: 1040:		
        -: 1041:    case steward:
    #####: 1042:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1043:	{
        -: 1044:	  //+2 cards
    #####: 1045:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1046:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1047:	}
    #####: 1048:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1049:	{
        -: 1050:	  //+2 coins
    #####: 1051:	  state->coins = state->coins + 2;
        -: 1052:	}
        -: 1053:      else
        -: 1054:	{
        -: 1055:	  //trash 2 cards in hand
    #####: 1056:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1057:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1058:	}
        -: 1059:			
        -: 1060:      //discard card from hand
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case tribute:
    #####: 1065:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1066:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1067:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1068:	  state->deckCount[nextPlayer]--;
        -: 1069:	}
    #####: 1070:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1071:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1072:	  state->discardCount[nextPlayer]--;
        -: 1073:	}
        -: 1074:	else{
        -: 1075:	  //No Card to Reveal
        -: 1076:	  if (DEBUG){
        -: 1077:	    printf("No cards to reveal\n");
        -: 1078:	  }
        -: 1079:	}
        -: 1080:      }
        -: 1081:	    
        -: 1082:      else{
    #####: 1083:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1084:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1086:	    state->deckCount[nextPlayer]++;
    #####: 1087:	    state->discard[nextPlayer][i] = -1;
    #####: 1088:	    state->discardCount[nextPlayer]--;
        -: 1089:	  }
        -: 1090:			    
    #####: 1091:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1092:	} 
    #####: 1093:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
    #####: 1096:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1097:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1098:	state->deckCount[nextPlayer]--;
        -: 1099:      }    
        -: 1100:		       
    #####: 1101:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1102:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1103:	state->playedCardCount++;
    #####: 1104:	tributeRevealedCards[1] = -1;
        -: 1105:      }
        -: 1106:
    #####: 1107:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1108:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1109:	  state->coins += 2;
        -: 1110:	}
        -: 1111:		    
    #####: 1112:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1113:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1114:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1115:	}
        -: 1116:	else{//Action Card
    #####: 1117:	  state->numActions = state->numActions + 2;
        -: 1118:	}
        -: 1119:      }
        -: 1120:	    
    #####: 1121:      return 0;
        -: 1122:		
        -: 1123:    case ambassador:
    #####: 1124:      j = 0;		//used to check if player has enough cards to discard
        -: 1125:
    #####: 1126:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1127:	{
    #####: 1128:	  return -1;				
        -: 1129:	}
        -: 1130:
    #####: 1131:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
    #####: 1136:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1139:	    {
    #####: 1140:	      j++;
        -: 1141:	    }
        -: 1142:	}
    #####: 1143:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  return -1;				
        -: 1146:	}
        -: 1147:
        -: 1148:      if (DEBUG) 
        -: 1149:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1150:
        -: 1151:      //increase supply count for choosen card by amount being discarded
    #####: 1152:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1153:			
        -: 1154:      //each other player gains a copy of revealed card
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1160:	    }
        -: 1161:	}
        -: 1162:
        -: 1163:      //discard played card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1165:
        -: 1166:      //trash copies of cards returned to supply
    #####: 1167:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1168:	{
    #####: 1169:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:	    {
    #####: 1171:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1172:		{
    #####: 1173:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1174:		  break;
        -: 1175:		}
        -: 1176:	    }
        -: 1177:	}			
        -: 1178:
    #####: 1179:      return 0;
        -: 1180:		
        -: 1181:    case cutpurse:
        -: 1182:
    #####: 1183:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1184:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1185:	{
    #####: 1186:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1187:	    {
    #####: 1188:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1189:		{
    #####: 1190:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1191:		    {
    #####: 1192:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1193:		      break;
        -: 1194:		    }
    #####: 1195:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1196:		    {
    #####: 1197:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1198:			{
        -: 1199:			  if (DEBUG)
        -: 1200:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1201:			}	
    #####: 1202:		      break;
        -: 1203:		    }		
        -: 1204:		}
        -: 1205:					
        -: 1206:	    }
        -: 1207:				
        -: 1208:	}				
        -: 1209:
        -: 1210:      //discard played card from hand
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1212:
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:		
        -: 1216:    case embargo: 
    #####: 1217:		refactorEmbargo(card, choice1, state, handPos);
call    0 never executed
        -: 1218:		
        -: 1219:    case outpost:
        -: 1220:      //set outpost flag
    #####: 1221:      state->outpostPlayed++;
        -: 1222:			
        -: 1223:      //discard card
    #####: 1224:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case salvager:
        -: 1228:      //+1 buy
    #####: 1229:      state->numBuys++;
        -: 1230:			
    #####: 1231:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1232:	{
        -: 1233:	  //gain coins equal to trashed card
    #####: 1234:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1235:	  //trash card
    #####: 1236:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1237:	}
        -: 1238:			
        -: 1239:      //discard card
    #####: 1240:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1241:      return 0;
        -: 1242:		
        -: 1243:    case sea_hag:
    #####: 1244:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1245:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1246:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1247:	  state->discardCount[i]++;
    #####: 1248:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1249:	}
        -: 1250:      }
    #####: 1251:      return 0;
        -: 1252:		
        -: 1253:    case treasure_map:
        -: 1254:      //search hand for another treasure_map
    #####: 1255:      index = -1;
    #####: 1256:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:	{
    #####: 1258:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1259:	    {
    #####: 1260:	      index = i;
    #####: 1261:	      break;
        -: 1262:	    }
        -: 1263:	}
    #####: 1264:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1265:	{
        -: 1266:	  //trash both treasure cards
    #####: 1267:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1268:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1269:
        -: 1270:	  //gain 4 Gold cards
    #####: 1271:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1274:	    }
        -: 1275:				
        -: 1276:	  //return success
    #####: 1277:	  return 1;
        -: 1278:	}
        -: 1279:			
        -: 1280:      //no second treasure_map found in hand
    #####: 1281:      return -1;
        -: 1282:    }
        -: 1283:	
    #####: 1284:  return -1;
        -: 1285:}
        -: 1286:
function discardCard called 38 returned 100% blocks executed 78%
       38: 1287:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1288:{
        -: 1289:	
        -: 1290:  //if card is not trashed, added to Played pile 
       38: 1291:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1292:    {
        -: 1293:      //add card to played pile
       38: 1294:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       38: 1295:      state->playedCardCount++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //set played card to -1
       38: 1299:  state->hand[currentPlayer][handPos] = -1;
        -: 1300:	
        -: 1301:  //remove card from player's hand
       38: 1302:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
       38: 1307:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:  else 	
        -: 1313:    {
        -: 1314:      //replace discarded card with last card in hand
       38: 1315:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1316:      //set last card to -1
       38: 1317:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1318:      //reduce number of cards in hand
       38: 1319:      state->handCount[currentPlayer]--;
        -: 1320:    }
        -: 1321:	
       38: 1322:  return 0;
        -: 1323:}
        -: 1324:
function gainCard called 8 returned 100% blocks executed 70%
        8: 1325:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1326:{
        -: 1327:  //Note: supplyPos is enum of choosen card
        -: 1328:	
        -: 1329:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1330:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1331:    {
    #####: 1332:      return -1;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //added card for [whoseTurn] current player:
        -: 1336:  // toFlag = 0 : add to discard
        -: 1337:  // toFlag = 1 : add to deck
        -: 1338:  // toFlag = 2 : add to hand
        -: 1339:
        8: 1340:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:    {
    #####: 1342:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1343:      state->deckCount[player]++;
        -: 1344:    }
        8: 1345:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1346:    {
    #####: 1347:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1348:      state->handCount[player]++;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
        8: 1352:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1353:      state->discardCount[player]++;
        -: 1354:    }
        -: 1355:	
        -: 1356:  //decrease number in supply pile
        8: 1357:  state->supplyCount[supplyPos]--;
        -: 1358:	 
        8: 1359:  return 0;
        -: 1360:}
        -: 1361:
function updateCoins called 2218 returned 100% blocks executed 100%
     2218: 1362:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1363:{
        -: 1364:  int i;
        -: 1365:	
        -: 1366:  //reset coin count
     2218: 1367:  state->coins = 0;
        -: 1368:
        -: 1369:  //add coins for each Treasure card in player's hand
    11328: 1370:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1371:    {
     9110: 1372:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1373:	{
     5889: 1374:	  state->coins += 1;
        -: 1375:	}
     3221: 1376:      else if (state->hand[player][i] == silver)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1377:	{
      990: 1378:	  state->coins += 2;
        -: 1379:	}
     2231: 1380:      else if (state->hand[player][i] == gold)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1381:	{
      990: 1382:	  state->coins += 3;
        -: 1383:	}	
        -: 1384:    }	
        -: 1385:
        -: 1386:  //add bonus
     2218: 1387:  state->coins += bonus;
        -: 1388:
     2218: 1389:  return 0;
        -: 1390:}
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
        -: 1394:
