        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Used the testUpdateCoins.c file as a template for this code, as stated 
        -:    3: * as being allowed in the Assignment 3 Assistance (2) page on Canvas
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6: 
        -:    7:  // Andrea Dias
        -:    8:// 4/29/18
        -:    9:// CS 362-400 Spring 2018
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:
        4:   19:void myAssert(int a, int b){
        4:   20:	if (a != b) {
    #####:   21:		printf("***Test fails! You did not get the intended result***\n");
        -:   22:	}
        -:   23:
        -:   24:
        4:   25:}
        -:   26:
        1:   27:int main() {
        -:   28:
        1:   29:    int k[10] = {adventurer, council_room, feast, gardens, mine ,remodel, smithy, village, baron, great_hall};
        -:   30:
        -:   31:    struct gameState *state, *teststate;
        -:   32:    struct gameState myGame, myTestGame;
        1:   33:    state = &myGame;
        1:   34:    teststate = &myTestGame;
        -:   35:    int playerNum, testPlayerNum;
        -:   36:
        1:   37:    initializeGame(2, k, 40, state);
        1:   38:    memcpy(teststate, state, sizeof(struct gameState));
        -:   39:    
        -:   40:
        1:   41:    printf ("TESTING whoseTurn():\n");
        -:   42:
        1:   43:	printf("Starting turn: \n");
        1:   44:	testPlayerNum = whoseTurn(teststate);
        1:   45:	playerNum = whoseTurn(state);
        1:   46:	printf("Whose turn is it? Player: %d\n", playerNum);
        1:   47:	myAssert(playerNum, testPlayerNum);
        -:   48:	
        1:   49:	printf("End of Player %d turn, Who is Next?\n", playerNum);
        1:   50:	endTurn(teststate);
        1:   51:	testPlayerNum = whoseTurn(teststate);
        1:   52:	playerNum = whoseTurn(teststate);
        1:   53:	printf("Player: %d\n", playerNum);
        1:   54:	myAssert(playerNum, testPlayerNum);
        -:   55:	
        1:   56:	printf("End of Player %d turn, Who is Next?\n", playerNum);
        1:   57:	endTurn(teststate);
        1:   58:	testPlayerNum = whoseTurn(teststate);
        1:   59:	playerNum = whoseTurn(teststate);
        1:   60:	printf("Player: %d\n", playerNum);
        1:   61:	myAssert(playerNum, testPlayerNum);
        -:   62:	
        1:   63:	printf("End of Player %d turn, Who is Next?\n", playerNum);
        1:   64:	endTurn(teststate);
        1:   65:	testPlayerNum = whoseTurn(teststate);
        1:   66:	playerNum = whoseTurn(teststate);
        1:   67:	printf("Player: %d\n", playerNum);
        1:   68:	myAssert(playerNum, testPlayerNum);
        -:   69:
        -:   70:
        1:   71:    return 0;
        -:   72:}
